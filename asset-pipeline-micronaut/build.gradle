buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
	}
}

plugins {
	id 'com.jfrog.bintray' version '1.2'
}


apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'idea'

group = 'com.bertramlabs.plugins'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'
repositories {
	mavenCentral()
	maven {
        credentials {
            // define these in .gradle/gradle.properties below your HOME directory
            username micronautRepoUsername
            password micronautRepoPassword
        }
        url 'https://repo.micronaut.io/artifactory/libs-snapshots-local'
    }
}

ext {
	micronautVersion = '1.0.0.M4'
}

configurations {
	provided
	doc.extendsFrom(runtime)
}

sourceSets {
	main {
		compileClasspath += configurations.provided
		groovy.srcDirs   += ['src/main/java']
		java.srcDirs      = []
	}
}

dependencies {
	compile     project(':asset-pipeline-core')
	compileOnly "io.micronaut:inject-groovy:${micronautVersion}"
	compileOnly "io.micronaut:inject-java:${micronautVersion}"
    compile "io.micronaut:http-server-netty:${micronautVersion}"
    compile 'javax.annotation:javax.annotation-api:1.3.2'

    runtime "ch.qos.logback:logback-classic:1.2.3"

    testCompile("org.spockframework:spock-core:1.1-groovy-2.4") {
        exclude module:'groovy-all'
    }
    testCompile "io.micronaut:http-client:${micronautVersion}"
    testCompile "io.micronaut:inject-groovy:${micronautVersion}"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    
}

test {
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			artifactId 'asset-pipeline-micronaut'
			pom.withXml {
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name 'asset-pipeline-micronaut'
					description 'JVM Asset Pipeline Micronaut Adapter.'
					url 'https://github.com/bertramdev/asset-pipeline'
					scm {
						url 'https://github.com/bertramdev/asset-pipeline'
						connection 'scm:https://bertramdev@github.com/bertramdev/asset-pipeline.git'
						developerConnection 'scm:git://github.com/bertramdev/asset-pipeline.git'
					}
					licenses {
						license {
							name 'The Apache Software License, Version 2.0'
							url 'http://www.apache.org/license/LICENSE-2.0.txt'
							distribution 'repo'
						}
					}
					developers {
						developer {
							id 'davydotcom'
							name 'David Estes'
							email 'davydotcom@gmail.com'
						}
					}
				}
			}
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}

	repositories {
		maven {
			credentials {
				username project.properties.get('artifactoryPublishUsername')
				password project.properties.get('artifactoryPublishPassword')
			}
			url 'https://repo.grails.org/grails/libs-snapshots-local/'
		}
	}
}

bintray {
	if(project.hasProperty('bintrayUser')) {
		user = bintrayUser
		key = bintrayKey
	}
	publications = ['maven']
    publish=true
	pkg {
		repo = 'asset-pipeline'
		userOrg = 'bertramlabs'
		name = 'asset-pipeline-micronaut'
		licenses = ['Apache-2.0']
		websiteUrl = 'https://github.com/bertramdev/asset-pipeline'
        issueTrackerUrl = 'https://github.com/bertramdev/asset-pipeline/issues'
        vcsUrl = 'https://github.com/bertramdev/asset-pipeline.git'
        version {
            if (project.hasProperty('mavenUser')) {
                mavenCentralSync {
                    sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
                    user = mavenUser //OSS user token
                    password = mavenPassword //OSS user password
                    close = '1'
                    //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                }
            }
        }
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task(console, dependsOn: 'classes', type: JavaExec) {
	main = 'groovy.ui.Console'
	classpath = sourceSets.main.runtimeClasspath
}



bintrayUpload.dependsOn build, sourcesJar, javadocJar